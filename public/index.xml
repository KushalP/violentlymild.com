<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Violently Mild</title>
    <link>https://www.violentlymild.com/</link>
    <description>Recent content on Violently Mild</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Tue, 10 Nov 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://www.violentlymild.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Deployment Contracts</title>
      <link>https://www.violentlymild.com/posts/deployment-contracts/</link>
      <pubDate>Tue, 10 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://www.violentlymild.com/posts/deployment-contracts/</guid>
      <description>

&lt;p&gt;I’ve been in a number of discussions recently around how to improve
deployment workflows and how best to implement (and improve upon)
&lt;a href=&#34;http://12factor.net/&#34;&gt;12-Factor applications&lt;/a&gt; in a continuous
delivery environment. The following is a bunch of assumptions,
desires, and implementations I have. It’s entirely aimed at what some
organisations are calling their “platform team” and might not be
applicable to all use-cases.&lt;/p&gt;

&lt;h2 id=&#34;helping-everyone-do-more&#34;&gt;Helping everyone do more&lt;/h2&gt;

&lt;p&gt;For the majority of modern day platform teams their task is to
understand the needs of the teams they support and to provide simpler
processes for them to do what they need to do. Specifically:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;How can we help our colleagues go from nothing to something as quick as possible?&lt;/li&gt;
&lt;li&gt;How can we help our colleagues improve upon widely used services over time?&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;implicit-vs-explicit&#34;&gt;Implicit vs. Explicit&lt;/h2&gt;

&lt;p&gt;Many teams have to deal with a myriad of different requirements. Some
even have fixed deadlines thrown in for extra measure. In those
situations smart teams tend to start from a consistent mindset: they
&lt;a href=&#34;https://www.gov.uk/design-principles#second&#34;&gt;do less&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Even smarter teams standardise workflows to help the masses that
depend on them go faster. Standardisation can take two routes:
documentation and enforcement. Things you &lt;strong&gt;should&lt;/strong&gt; do and things
that you &lt;strong&gt;must&lt;/strong&gt; do. Or, to put it another way, implicit
vs. explicit.&lt;/p&gt;

&lt;p&gt;In the rest of this post I’d like to discuss how you can make such
tooling explicit to teams to help them go faster.&lt;/p&gt;

&lt;h2 id=&#34;brakes-help-you-go-faster&#34;&gt;Brakes help you go faster&lt;/h2&gt;

&lt;p&gt;Product teams want to create and update applications, whenever they
want, at speed.&lt;/p&gt;

&lt;p&gt;To help them do this, you might build some tools to simplify the
process. Along the way, you might also build some brakes in to help
them go faster around the obstacles they’re likely to hit as they aim
to get closer to production.&lt;/p&gt;

&lt;p&gt;These tools might be libraries or services, but you’ll need a
consistent artefact to ease communication. Let’s look at a small
example of a UI and a machine-readable (JSON) file.&lt;/p&gt;

&lt;h2 id=&#34;starting-a-new-application&#34;&gt;Starting a new application&lt;/h2&gt;

&lt;p&gt;For any application to be worked on, it needs a name and a place to
live. Let’s assume this interaction starts with a user interface:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://www.violentlymild.com/images/service-create.jpg&#34; alt=&#34;Example deployment form&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;When teams (or a product owner) submit a name for their new service a
number of things happen automatically:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;a version control repository is created with the provided name&lt;/li&gt;
&lt;li&gt;a continuous integration job (for master and for any branches)&lt;/li&gt;
&lt;li&gt;a basic development environment for the application&lt;/li&gt;
&lt;li&gt;a status page showing the development state of the application (Is
it running? How long ago it was both created and last modified?
Who has worked on it?)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This means that a team can start prototyping and testing out ideas
without having to worry about going beyond a basic development
environment.&lt;/p&gt;

&lt;p&gt;You might also abstract away a number of application decisions so that
teams can concentrate on building their products. By providing
libraries upfront, you can get get rid of a number of decisions for a
team. Libraries that provide:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;a standardised way to do logging&lt;/li&gt;
&lt;li&gt;common endpoints for monitoring and healthchecks for web
frameworks&lt;/li&gt;
&lt;li&gt;storage for short lived session data&lt;/li&gt;
&lt;li&gt;user authentication&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once a prototype has been built and briefly tested with users you
might want to move it into increasingly more “real” test environments.&lt;/p&gt;

&lt;h2 id=&#34;a-machine-readable-contract&#34;&gt;A machine-readable contract&lt;/h2&gt;

&lt;p&gt;It’s rare that applications run by themselves. In many cases they are
one small part of a bigger system. However making sure all of these
applications play nicely in a distributed system is no small feat.&lt;/p&gt;

&lt;p&gt;To have an application be deployable in a number of different testing
environments means providing some useful information for operators. In
the following sections I’m going to describe a JSON file that might
help ease moving a prototype into production.&lt;/p&gt;

&lt;p&gt;Earlier in this post I showed a small sketch of a user interface. I
described how it did a number of things automatically for a team. A
fuller example could create a structured text file describing the
application, a deployment contract. So what would this file look like?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;language&amp;quot;: &amp;quot;clojure&amp;quot;,
  &amp;quot;script&amp;quot;: [&amp;quot;lein test&amp;quot;],
  &amp;quot;dependencies&amp;quot;: [
    {&amp;quot;service&amp;quot;: &amp;quot;postgresql&amp;quot;},
    {&amp;quot;service&amp;quot;: &amp;quot;authentication&amp;quot;}
  ],
  &amp;quot;healthcheck&amp;quot;: &amp;quot;/healthcheck&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This JSON file would provide the deployment contract that an
application makes with the environment that it’s going to run
in. Moving up through various environments and into production would
require more detail to be added to this file and for each environment
to assert what’s required (exposed by the status page) before the team
can continue.&lt;/p&gt;

&lt;p&gt;To get into a similar pre-production environment the application’s
manifest might have to provide a list of monitoring endpoints. This is
useful because rather than monitoring endpoints existing in config
management code it can registered (and updated) upon deploying a
service into an environment.&lt;/p&gt;

&lt;p&gt;The updated manifest file would look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;language&amp;quot;: &amp;quot;clojure&amp;quot;,
  &amp;quot;script&amp;quot;: [&amp;quot;lein test&amp;quot;],
  &amp;quot;dependencies&amp;quot;: [
    {&amp;quot;service&amp;quot;: &amp;quot;postgresql&amp;quot;},
    {&amp;quot;service&amp;quot;: &amp;quot;authentication&amp;quot;}
  ],
  &amp;quot;healthcheck&amp;quot;: &amp;quot;/healthcheck&amp;quot;,
  &amp;quot;monitoring&amp;quot;: [
    {
      &amp;quot;endpoint&amp;quot;: &amp;quot;/user/*&amp;quot;,
      &amp;quot;percentiles&amp;quot;: {
        &amp;quot;90th&amp;quot;: &amp;quot;X&amp;quot;,
        &amp;quot;95th&amp;quot;: &amp;quot;Y&amp;quot;,
        &amp;quot;99th&amp;quot;: &amp;quot;Z&amp;quot;
      }
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;getting-to-production&#34;&gt;Getting to production&lt;/h2&gt;

&lt;p&gt;In terms of infrastructure environments, the final step associated
with getting to production for some teams requires a security
audit. The automatic registration of the manifest in an environment
could manage this process when it’s triggered in one of the final
pre-production environments.&lt;/p&gt;

&lt;p&gt;The other step required to get into product is having a list of
members of the team that are on-call for the application. The updated
manifest would look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;language&amp;quot;: &amp;quot;clojure&amp;quot;,
  &amp;quot;script&amp;quot;: [&amp;quot;lein test&amp;quot;],
  &amp;quot;dependencies&amp;quot;: [
    {&amp;quot;service&amp;quot;: &amp;quot;postgresql&amp;quot;},
    {&amp;quot;service&amp;quot;: &amp;quot;authentication&amp;quot;}
  ],
  &amp;quot;healthcheck&amp;quot;: &amp;quot;/healthcheck&amp;quot;,
  &amp;quot;monitoring&amp;quot;: [
    {
      &amp;quot;endpoint&amp;quot;: &amp;quot;/user/*&amp;quot;,
      &amp;quot;percentiles&amp;quot;: {
        &amp;quot;90th&amp;quot;: &amp;quot;X&amp;quot;,
        &amp;quot;95th&amp;quot;: &amp;quot;Y&amp;quot;,
        &amp;quot;99th&amp;quot;: &amp;quot;Z&amp;quot;
      }
    }
  ],
  &amp;quot;team&amp;quot;: {
    &amp;quot;oncall&amp;quot;: [
      {
        &amp;quot;name&amp;quot;: &amp;quot;Kushal Pisavadia&amp;quot;,
        &amp;quot;tel&amp;quot;: &amp;quot;+447700000000&amp;quot;
      }
    ]
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this in place a product team can happily choose to make a release
of their application and put it into the production environment when
they’re ready. A side benefit to operators is they now have a number
of services that all describe how to test them, how to monitor them,
how to escalate and what services depend on each other. That’s
incredibly powerful.&lt;/p&gt;

&lt;h2 id=&#34;in-conclusion&#34;&gt;In conclusion&lt;/h2&gt;

&lt;p&gt;Hopefully this description of a hand-held process from nothing to
production is useful. It’s a small introduction to how platform teams
might provide tools to help their teams move faster.&lt;/p&gt;

&lt;p&gt;If you take anything away from this post it’s that we should start to
think long term about the kinds of things that we as operators care
about. Not containers or whatever new technology exists over the
horizon, but how we help our colleagues deliver. Then when a new
technology does arrive our only role will be to integrate it against
our existing deployment contracts. In addition, by using such tools
you can provide useful information to your infrastructure (about your
services) to help you make better decisions along the way.&lt;/p&gt;

&lt;p&gt;It’s worth saying that this shouldn’t be seen as a one size fits all
solution. There are going to be many problems along the way and your
job (as a platform/operations team) is to enable the teams that depend
on you as much as possible. Sticking to a fixed script isn’t always
the best move.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Extra reading:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://queue.acm.org/detail.cfm?id=2841313&#34;&gt;Automation Should Be Like Iron Man, Not Ultron – Thomas A. Limoncelli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.kitchensoap.com/2012/09/21/a-mature-role-for-automation-part-i/&#34;&gt;A Mature Role for Automation – John Allspaw&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>What will happen in the next year?</title>
      <link>https://www.violentlymild.com/posts/what-will-happen-in-the-next-year/</link>
      <pubDate>Mon, 30 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://www.violentlymild.com/posts/what-will-happen-in-the-next-year/</guid>
      <description>&lt;p&gt;I recently attended &lt;a href=&#34;http://www.scalesummit.org/&#34;&gt;Scale Summit&lt;/a&gt;. It’s
an &lt;a href=&#34;https://en.wikipedia.org/wiki/Unconference&#34;&gt;unconference&lt;/a&gt; that’s
been running on and off for a few years. Every year there’s a regular
session of &lt;em&gt;“What’s changed since the last Scale Summit?”&lt;/em&gt;. At this
session we go through any notes we have from
&lt;a href=&#34;https://gist.github.com/philandstuff/9684513#session-4-whats-changed-since-last-scale-camp&#34;&gt;previous years&lt;/a&gt;
and discuss
&lt;a href=&#34;https://gist.github.com/SteveMarshall/1f2d733f2cb8dda330bc&#34;&gt;what’s changed&lt;/a&gt;. Finally,
the session ends with those in attendance suggesting what they believe
will happen in the coming year.&lt;/p&gt;

&lt;p&gt;Sessions at Scale Summit last forty-five minutes. In the end, we
didn’t have time to discuss what we believe will happen in the next
year and quickly joined the end of the day festivities.&lt;/p&gt;

&lt;p&gt;The unconference was closed with a number of lightning talks, but two
highlights for me were talks about (removing) the use of gendered
words and another on looking after yourself and burnout. Following on
from the lightning talks, &lt;a href=&#34;https://twitter.com/jonty&#34;&gt;@jonty&lt;/a&gt; asked
all attendees what they thought would happen in the next year. Answers
varied from an increasing number of security vulnerabilities through
to greater adoption of Windows in the developer community.&lt;/p&gt;

&lt;p&gt;I’m not sure why, but I didn’t put my hand up as the microphone went
around the room. But I have a hope for what it could be: greater
emphasis on happy, diverse, productive, and inclusive teams.&lt;/p&gt;

&lt;p&gt;We’ve seen an increasing number of people talk about these topics
within technology. That’s a good thing. But large organisations
haven’t taken these topics as serious as they should be, though that’s
going to change. Evidence has shown that it affects the
&lt;a href=&#34;https://fortune.com/2011/01/27/investing-in-the-100-best-beats-the-market-hands-down/&#34;&gt;bottom&lt;/a&gt;
&lt;a href=&#34;https://fortune.com/2015/03/03/women-led-companies-perform-three-times-better-than-the-sp-500/&#34;&gt;line&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For a while now people have been speaking at technology conferences
about scale; the problems they’ve solved and the war stories around
them. Some of those same people have grown up, have families of their
own, and are now likely running teams or organisations. I’m looking
forward to hearing about how they’re scaling their teams and
organisations over the coming year and how they’re building happy,
diverse, productive and inclusive teams.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Solving problems with dependency management in Go</title>
      <link>https://www.violentlymild.com/posts/solving-problems-with-dependency-management-in-go/</link>
      <pubDate>Tue, 24 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://www.violentlymild.com/posts/solving-problems-with-dependency-management-in-go/</guid>
      <description>

&lt;p&gt;&lt;em&gt;This is a blog post I wrote for the GDS Technology blog. You can read
the original
&lt;a href=&#34;https://gdstechnology.blog.gov.uk/2015/02/24/solving-problems-with-dependency-management-in-go/&#34;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In a
&lt;a href=&#34;https://gdstechnology.blog.gov.uk/2014/11/14/using-go-in-government/&#34;&gt;previous blog post&lt;/a&gt;
we talked about how we use the programming language Go. But it only
briefly touched on the issue of
&lt;a href=&#34;https://www.gov.uk/service-manual/making-software/dependency-management&#34;&gt;dependency management&lt;/a&gt;,
where Go is reliant on backwards compatible or vendored software. This
post is about what we’ve done about that.&lt;/p&gt;

&lt;h3 id=&#34;libraries&#34;&gt;Libraries&lt;/h3&gt;

&lt;p&gt;As developers we regularly use other libraries or packages to help us
solve a problem rather than writing everything ourselves. Most
programming languages offer a dependency system for distributing
libraries. At GDS we use languages like Ruby, Python and Java and each
language has its preferred tool to manage these dependencies: bundler,
pip and gradle, for example.&lt;/p&gt;

&lt;p&gt;Libraries installed through a package system can be installed
system-wide (known as site packages) or copied somewhere into the
directory containing the project (known as vendoring). However this
tripped us up when we started to use Go. This is because Go doesn’t
currently provide a way of defining specific versions of dependencies
to use. The language maintainers have
&lt;a href=&#34;http://golang.org/doc/faq#get_version&#34;&gt;publicly endorsed vendoring&lt;/a&gt;
of dependencies, but this isn’t always productive when you want an
easy way to keep various dependencies up to date.&lt;/p&gt;

&lt;h3 id=&#34;dependencies-in-go&#34;&gt;Dependencies in Go&lt;/h3&gt;

&lt;p&gt;Dependencies in Go are downloaded using the &lt;code&gt;go get&lt;/code&gt; tool and placed
into a directory determined by the &lt;code&gt;$GOPATH&lt;/code&gt; environment
variable. Dependencies aren’t explicitly pinned to a version and the
recommended model of development is to always keep the master branch
backwards compatible and up-to-date, or to vendor dependencies as
required.&lt;/p&gt;

&lt;p&gt;If two developers were to work on a single project at two points in
time, with some difference in-between. And the dependencies that were
used had changed during this time. Then the software they’d be working
on would be different and could cause issues.&lt;/p&gt;

&lt;p&gt;This was a problem for us because we wanted to make sure that the
various services we write in Go can always be compiled using specific
versions of each library we were using.&lt;/p&gt;

&lt;h3 id=&#34;pinning-dependencies-to-specific-versions&#34;&gt;Pinning dependencies to specific versions&lt;/h3&gt;

&lt;p&gt;The most common way to define specific versions of dependencies is to
create a dependency file that references specific tags or commits in
the different packaging systems the code is located in.&lt;/p&gt;

&lt;p&gt;The dependency management tool is used to get, build and install the
library. One advantage is that your project repository continues to
only use the specific library with the state you expect.&lt;/p&gt;

&lt;h3 id=&#34;pinning-dependencies-to-specific-versions-in-go&#34;&gt;Pinning dependencies to specific versions in Go&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;go get&lt;/code&gt; does not have an explicit concept of versions. As a result,
different members of a team could be importing different versions of
any libraries being used. This is less than ideal.&lt;/p&gt;

&lt;p&gt;Different dependencies may introduce incompatibilities, security
vulnerabilities, or be removed entirely. For these reasons, it’s
better to have more control over the upgrade process when building a
real-world application.&lt;/p&gt;

&lt;h3 id=&#34;what-have-we-chosen&#34;&gt;What have we chosen?&lt;/h3&gt;

&lt;p&gt;As well as being able to pin versions of libraries we use, another
requirement for us was being able to compile and run Go code without
requiring a global &lt;code&gt;$GOPATH&lt;/code&gt; to be in place.&lt;/p&gt;

&lt;p&gt;Our current solution is either &lt;a href=&#34;https://github.com/tools/godep&#34;&gt;Godep&lt;/a&gt;
or &lt;a href=&#34;https://github.com/mattn/gom&#34;&gt;gom&lt;/a&gt;, depending on the
project. We’ve chosen two options because different projects have
different requirements. For some projects we want to pin a specific
version but don’t mind downloading dependencies and don’t require a
fixed &lt;code&gt;$GOPATH&lt;/code&gt;. Whereas for others we want to vendor the dependencies
because of how we view the code and the respective binary we generate.&lt;/p&gt;

&lt;h3 id=&#34;godep-vs-gom&#34;&gt;Godep vs. gom&lt;/h3&gt;

&lt;p&gt;Godep’s preferred specification format is JSON. It will create a
dependency file and create copies of all of your libraries into a
&lt;code&gt;Godeps&lt;/code&gt; directory at the root of your package. The expectation being
that the libraries will be checked in with the rest of your code once
you start using Godep.&lt;/p&gt;

&lt;p&gt;In comparison, gom is very similar to Ruby’s bundler. It expects a
Gomfile to list the dependencies of the project, in a Ruby-like syntax
which will be familiar to Bundler users. The dependencies are
downloaded into a &lt;code&gt;_vendor&lt;/code&gt; directory and there’s no need to
explicitly check this into source control if you don’t need to. One
added bonus for gom is that if the gom tool is available on your
&lt;code&gt;$PATH&lt;/code&gt; there’s no need to compile your project within a &lt;code&gt;$GOPATH&lt;/code&gt; as
this will be automatically set to use the specific dependencies you
reference in your Gomfile.&lt;/p&gt;

&lt;h3 id=&#34;what-next&#34;&gt;What next?&lt;/h3&gt;

&lt;p&gt;For now, both Godep and gom works for us. Should a consensus emerge
from the Go community over what to use, we’ll look at switching again.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Running a game day for GOV.UK</title>
      <link>https://www.violentlymild.com/posts/running-a-game-day-for-gov-uk/</link>
      <pubDate>Fri, 06 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://www.violentlymild.com/posts/running-a-game-day-for-gov-uk/</guid>
      <description>

&lt;p&gt;&lt;em&gt;This is a blog post I wrote for the GDS Technology blog. You can read
the original
&lt;a href=&#34;https://gdstechnology.blog.gov.uk/2015/02/06/running-a-game-day-for-gov-uk/&#34;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;For much of January, GOV.UK had a firebreak. It’s where teams are
given some time to investigate new ideas and clean up technical
debt. As part of this we ran a game day. In this blog post I’m going
to explain what game days are, what we did and what we learnt.&lt;/p&gt;

&lt;h3 id=&#34;what-is-a-game-day&#34;&gt;What is a game day?&lt;/h3&gt;

&lt;p&gt;The reality is that we can’t prevent the unexpected. However, there
are some ways that we can prepare ourselves for it. We shouldn’t treat
these unexpected events as outside the bounds of what we’re able to
test. Instead, we should try to use them as a way to provide more
feedback and help us become more resilient. The advantage of this is
that it doesn’t rely on a big disaster to occur before we can learn
how to improve our systems. The added benefit is that the scope can be
defined by the team. This is where game days come in.&lt;/p&gt;

&lt;p&gt;Game days are designed to let learning happen in a safe, controlled
fashion. They’re exercises designed to teach teams how to adapt to the
inevitable: system failure at all
levels. &lt;a href=&#34;http://queue.acm.org/detail.cfm?id=2371297&#34;&gt;Literature&lt;/a&gt;
suggests that, in technical operations, they were created by Amazon in
the early 2000s. They took the model of firefighter training — where
major failures were injected into critical systems on purpose — and
applied it to technology systems, software and the people surrounding
them.&lt;/p&gt;

&lt;p&gt;Things break, disasters happen and system failure is inevitable. The
main thing about preparing for it is first to accept it. And we knew
just where to start: the 2nd line team.&lt;/p&gt;

&lt;h3 id=&#34;2nd-line-team&#34;&gt;2nd line team&lt;/h3&gt;

&lt;p&gt;For those new to the term, the 2nd line team are the technical support
team for GOV.UK. They’re the technical counterpart to the
&lt;a href=&#34;https://www.youtube.com/watch?v=JqaAvbHY3ug&#34;&gt;GOV.UK helpdesk&lt;/a&gt;, the
1st line team. They look at our
&lt;a href=&#34;https://www.icinga.org/&#34;&gt;monitoring systems&lt;/a&gt; and
&lt;a href=&#34;http://graphite.wikidot.com/&#34;&gt;related metrics&lt;/a&gt; to make sure GOV.UK is
working as expected, as well as doing some day-to-day gardening to
make sure GOV.UK continues to operate in a healthy state.&lt;/p&gt;

&lt;p&gt;The 2nd line team consists of three people, usually a
&lt;a href=&#34;https://www.gov.uk/service-manual/the-team/web-operations&#34;&gt;web operations engineer&lt;/a&gt;
and two software developers. They’re rotated on and off the 2nd line
team on a weekly basis from the different product teams that work on
GOV.UK. We’ve run a 2nd line team in some form since the launch of
GOV.UK in October 2012.&lt;/p&gt;

&lt;p&gt;For our first game day we were really interested to see how this team
would cope with a number of disaster scenarios. This is because we’d
expect them to be the first people looking into what was going on. All
of the scenarios we ran were on our staging environment which is a
one-to-one replica of our production environment (including traffic)
so that we wouldn’t affect users of GOV.UK.&lt;/p&gt;

&lt;h3 id=&#34;structure-of-the-game-day&#34;&gt;Structure of the game day&lt;/h3&gt;

&lt;p&gt;A number of us got together to discuss what we wanted to learn for our
first game day. The common themes were about how prepared we were and
how we could improve our systems.&lt;/p&gt;

&lt;p&gt;Following on from this, four of us agreed to become the organisers for
the first game day. We would be open to suggestions throughout the
design process but would keep the details under wraps. We didn’t want
to risk priming the 2nd line team. We used a number of brilliant
resources that are available to help us design the game day. These
range from a
&lt;a href=&#34;http://queue.acm.org/detail.cfm?id=2371516&#34;&gt;high-level overview&lt;/a&gt;
through to a more
&lt;a href=&#34;https://stripe.com/blog/game-day-exercises-at-stripe&#34;&gt;hands on report&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One of our goals was to make sure the individuals on 2nd line didn’t
feel they were the ones at fault. We wanted to make it very clear to
them that being unable to find a fix for, or way around, the disaster
wasn’t viewed as a failing on them as individuals or as a team. And
should they need our help we’d more than happily jump in to “undo”
what damage we’d caused. It was about learning where the gaps are in
our systems to learn how to make them more resilient.&lt;/p&gt;

&lt;p&gt;In the end we decided on two major scenarios: emergency publishing and
complete data loss.&lt;/p&gt;

&lt;h3 id=&#34;emergency-publishing&#34;&gt;Emergency publishing&lt;/h3&gt;

&lt;p&gt;In the event of a national emergency it’s quite likely that the
government will have an official response. They would publish a page
of up-to-date information for members of the public. If this occurs,
we show a clear banner on all relevant pages, linking through to a
summary page with more relevant information.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gdstechnology.blog.gov.uk/wp-content/uploads/sites/31/2015/02/test-national-emergency1-1024x699.png&#34; alt=&#34;Screenshot of what a test national emergency message on GOV.UK looks like&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We’ve run this scenario through a number of times, and automated a lot
of it. For the game day we wanted to test how the 2nd line team would
cope when the method of deployment and access to the environment where
GOV.UK is hosted were both removed. They were asked at the start of
the scenario to deploy the national emergency message. However, before
they began we removed their access to the VPN and infrastructure that
stores our documentation for such an event. The documentation itself
uses &lt;a href=&#34;http://sphinx-doc.org/&#34;&gt;static files&lt;/a&gt; and can be checked out as
a local repository. As part of our 2nd line process members of the
team are asked to keep an up-to-date local copy.&lt;/p&gt;

&lt;p&gt;Some of the parts of the scenario are in our documentation, but we as
the organisers weren’t sure whether the 2nd line team were aware of
what to do in this situation. In the end, the 2nd line team found an
alternate way into the environment which they all have relevant
credentials for, deployed the national emergency message and completed
the first game day scenario faster than we were expecting.&lt;/p&gt;

&lt;h3 id=&#34;complete-data-loss&#34;&gt;Complete data loss&lt;/h3&gt;

&lt;p&gt;For the second scenario of the day we asked the 2nd line team to go
about their usual duties: to watch the monitoring tools and to pick
stories from the 2nd line team’s backlog.&lt;/p&gt;

&lt;p&gt;As this was going on, we began to remove entire databases from
GOV.UK. We ran the equivalent of &lt;code&gt;DROP database;&lt;/code&gt; for each of the
database products we use and watched the aftermath. To make things
particularly difficult we also removed local backups that existed on
the database machines and separate backup machines that exist in the
virtual data center. This would force the team to use offsite backups,
which would be an unknown method for many of them as well as
significantly slower.&lt;/p&gt;

&lt;p&gt;This is a terrible situation to experience for anyone, but we learnt a
lot about gaps in our monitoring and documentation. There were a
number of warnings across our infrastructure before critical alerts
started to appear. It took the team a few minutes to realise what was
happening, and to finally understand the repercussions.&lt;/p&gt;

&lt;p&gt;Once the team realised what had happened, they quickly decided they
needed to restore database backups and work out what else was going
on. The team split into two groups: one set looking to restore
database backups and the other investigating what was going on. They
quickly saw that a member of the GOV.UK team (a game day organiser)
had gone rogue and started causing damage. The 2nd line team removed
credentials for the offending user and blocked their access.&lt;/p&gt;

&lt;p&gt;When trying to restore database backups the team were having trouble
following the documentation. The documentation for offsite backups was
out of date because we had recently switched to a
&lt;a href=&#34;http://duplicity.nongnu.org/&#34;&gt;new offsite backup process&lt;/a&gt;. One member
of the 2nd line team had worked on this recently, so they knew where
to look and what to do. Had they not been on the team this could have
been difficult to understand and they wouldn’t immediately know that
they would need to speak to other members of the GOV.UK team.&lt;/p&gt;

&lt;p&gt;As the 2nd line team started to restore database backups one by one
they saw some oddness. One big thing we learnt from this process is
that our offsite backups for PostgreSQL were truncated. They were
backups from the PostgreSQL secondaries and had data missing. Overall
the scenario was completed and database backups had been restored
within a matter of hours.&lt;/p&gt;

&lt;h3 id=&#34;what-next&#34;&gt;What next?&lt;/h3&gt;

&lt;p&gt;After running game days for GOV.UK, we’ve realised what a rich source
of feedback and insight we’ve been missing out on. They’ve shown that
being able to simulate failure in a safe environment, where some of
the stresses and pressures are removed is an incredible way to learn
more about your systems.&lt;/p&gt;

&lt;p&gt;The reality is that you get good at what you practice. If you can
practice your responses to bad things happening, your reactions will
hopefully be better when a real problem arises. With this knowledge,
we’re going to run more game days and run them more often. Both across
GOV.UK and within product teams.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Go in government</title>
      <link>https://www.violentlymild.com/posts/using-go-in-government/</link>
      <pubDate>Fri, 14 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>https://www.violentlymild.com/posts/using-go-in-government/</guid>
      <description>

&lt;p&gt;&lt;em&gt;This is cross posted from the
&lt;a href=&#34;http://blog.gopheracademy.com/birthday-bash-2014/go-turns-5/&#34;&gt;5th birthday celebration series&lt;/a&gt;
on the
&lt;a href=&#34;http://blog.gopheracademy.com/birthday-bash-2014/using-go-in-government/&#34;&gt;GopherAcademy blog&lt;/a&gt;
and the GDS Technology blog. It was co-authored with
&lt;a href=&#34;https://twitter.com/dancarley&#34;&gt;Dan Carley&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When the UK &lt;a href=&#34;https://gds.blog.gov.uk/&#34;&gt;Government Digital Service&lt;/a&gt;
started working on &lt;a href=&#34;https://www.gov.uk/&#34;&gt;GOV.UK&lt;/a&gt;, much of it was
&lt;a href=&#34;https://gds.blog.gov.uk/govuk-launch-colophon/&#34;&gt;built in Ruby&lt;/a&gt;. Since
then, we’ve used a number of different programming languages across
government including Java, Clojure, Scala, Python and Javascript. More
recently, we’ve turned to Go for some projects.&lt;/p&gt;

&lt;p&gt;This is a brief experience report. It’s about how we’ve used Go and
what we feel would be useful to know for others considering it. If
you’re more interested in reading a case study delving into the
details of what we’ve done with Go, we’ve posted on our blog about our
&lt;a href=&#34;https://gdstechnology.blog.gov.uk/2013/12/05/building-a-new-router-for-gov-uk/&#34;&gt;router&lt;/a&gt;,
&lt;a href=&#34;https://gdstechnology.blog.gov.uk/2014/08/27/taking-another-look-at-gov-uks-disaster-recovery/&#34;&gt;crawler&lt;/a&gt;,
and
&lt;a href=&#34;https://gdstechnology.blog.gov.uk/2014/10/01/cdn-acceptance-testing/&#34;&gt;CDN acceptance test&lt;/a&gt;
projects.&lt;/p&gt;

&lt;h3 id=&#34;what-made-go-a-viable-option&#34;&gt;What made Go a viable option?&lt;/h3&gt;

&lt;p&gt;As an organisation we feel that learning and experimenting with new
technologies exposes us to different approaches and broadens our
thinking. In the case of modern programming languages they solve
problems in different ways.&lt;/p&gt;

&lt;p&gt;We’d heard a lot of good things about Go. Its successful use at Google
for their internal systems and our knowledge of the calibre of the
team were both bonuses. However, concurrency, runtime speed, and
resource usage were important qualities for the
&lt;a href=&#34;https://gdstechnology.blog.gov.uk/2013/12/09/choosing-go-for-a-new-project/&#34;&gt;first project that we prototyped in Go&lt;/a&gt;. These
weren’t all satisfied by some of the languages that we were already
using.&lt;/p&gt;

&lt;h3 id=&#34;easy-to-pick-up&#34;&gt;Easy to pick up&lt;/h3&gt;

&lt;p&gt;Go has a simple language specification. This has proved valuable in
getting interest from colleagues that have no prior Go experience,
from peer reviewing code and to later contributing. Yet at no point
have we felt particularly constrained by that simplicity. When you
want to customise things, interfaces and composition make it easy and
reliable to do so.&lt;/p&gt;

&lt;p&gt;Go’s standard library was touted as being good and has proved to be
excellent. It has a wide breadth of packages for common tasks. These
include interacting with file systems, HTTP services and building
command-line tools, through to working with JSON data and formatting
dates and times. The standard library has a depth that hints at
experienced and well-considered design. RFC standards are adhered to
and useful functions are provided as building blocks for problems you
might be working on.&lt;/p&gt;

&lt;p&gt;The standard library has
&lt;a href=&#34;http://golang.org/pkg/&#34;&gt;wonderful documentation&lt;/a&gt;, which is also a
great source of learning for new and seasoned Go programmers. There’s
even an
&lt;a href=&#34;http://golang.org/doc/effective_go.html&#34;&gt;excellent guide to writing Go code idiomatically&lt;/a&gt;,
and a
&lt;a href=&#34;http://golang.org/cmd/gofmt/&#34;&gt;tool that formats your code correctly&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;easy-to-deploy&#34;&gt;Easy to deploy&lt;/h3&gt;

&lt;p&gt;Over the last few years we’ve learnt about the different Ruby models
of deployment (like Unicorn workers) and
&lt;a href=&#34;https://github.com/gds-operations/unicornherder&#34;&gt;built tooling to help us&lt;/a&gt;. We
have a culture of
&lt;a href=&#34;https://gds.blog.gov.uk/2012/11/02/regular-releases-reduce-risk/&#34;&gt;releasing regularly and releasing often&lt;/a&gt;. Any
technology that made deployment easy was going to do well in our
environment and Go happened to shine in this instance.&lt;/p&gt;

&lt;p&gt;Go has no special runtime requirements. A single binary is compiled
and transferred to a remote machine. There’s no extra runtime
dependency resolution (such as &lt;code&gt;bundle install&lt;/code&gt; in Ruby) required on
the other end. And, restarting the service is fast in comparison to
Rails where it can take a number of seconds before you get feedback.&lt;/p&gt;

&lt;h3 id=&#34;easy-to-use&#34;&gt;Easy to use&lt;/h3&gt;

&lt;p&gt;Teams tend to decide which languages work, individuals don’t. Our
usage of Go has increased over the past year and there are certain
characteristics of Go that have enabled this and made it easier to
work with.&lt;/p&gt;

&lt;p&gt;It’s been easy to get people interested in Go, from sysadmins who
claim they can’t code through to developers who are picking it up as
their second language. There’s a lot of momentum behind Go and what
the maintainers are trying to do with it. Specifically, the
&lt;a href=&#34;https://golang.org/doc/go1compat&#34;&gt;version stability promise for 1.x releases&lt;/a&gt;
is important to us. Having backwards compatible releases meant that we
could be confident working with the language over a longer period of
time and not have to worry about recompiling source code during minor
or patch releases.&lt;/p&gt;

&lt;p&gt;Having the &lt;code&gt;go&lt;/code&gt; tool cover the majority of project lifecycle tasks has
made getting to grips with the language a lot easier. Similarly, the
C-like syntax has reduced the barrier for many who have had trouble
with other language idioms.&lt;/p&gt;

&lt;p&gt;If you follow the statement
&lt;a href=&#34;http://c2.com/cgi/wiki?MakeItWorkMakeItRightMakeItFast&#34;&gt;“Make it work. Make it right. Make it fast”&lt;/a&gt;
then using Go means what you write is often fast enough by
default. The runtime is quick and improving on every release and the
standard library comes well equipped. This has meant that we can
concentrate on characteristics of our software that are more important
to us as a team: clarity and readability.&lt;/p&gt;

&lt;h3 id=&#34;where-we-re-going-next&#34;&gt;Where we’re going next&lt;/h3&gt;

&lt;p&gt;For GDS to fully embrace Go there are certain problems we need to
solve. One of these problems is management of versioned
dependencies. For some of our core systems we need to guarantee the
deployed versions of code and their respective dependencies. The
language maintainers have
&lt;a href=&#34;http://golang.org/doc/faq#get_version&#34;&gt;publicly endorsed vendoring&lt;/a&gt;. We’re
looking at using
&lt;a href=&#34;https://github.com/alphagov/styleguides/blob/master/go.md#external-dependencies&#34;&gt;gom and Godep as possible solutions&lt;/a&gt;
to this problem to be more developer-friendly.&lt;/p&gt;

&lt;p&gt;It doesn’t look like our usage of Go is going to decrease any time
soon.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Taking another look at GOV.UK’s disaster recovery</title>
      <link>https://www.violentlymild.com/posts/taking-another-look-at-gov-uks-disaster-recovery/</link>
      <pubDate>Wed, 27 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://www.violentlymild.com/posts/taking-another-look-at-gov-uks-disaster-recovery/</guid>
      <description>

&lt;p&gt;&lt;em&gt;This is a blog post I wrote for the GDS Technology blog. You can read
the original
&lt;a href=&#34;https://gdstechnology.blog.gov.uk/2014/08/27/taking-another-look-at-gov-uks-disaster-recovery/&#34;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As GOV.UK gets bigger, we often need to revisit the ways that we
originally solved some problems. One thing that’s changed recently is
how we prepare for disaster recovery.&lt;/p&gt;

&lt;h3 id=&#34;disaster-recovery&#34;&gt;Disaster Recovery&lt;/h3&gt;

&lt;p&gt;The reality of working in technology is that software systems fail,
more often than we’d like and usually in ways that are beyond our
control. The process of thinking up high-level failure scenarios and
solutions for them is called
&lt;a href=&#34;http://en.wikipedia.org/wiki/Disaster_recovery&#34;&gt;disaster recovery&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One extreme scenario for GOV.UK is that all our infrastructure
disappears. All of of our applications, the servers they run on and
even the infrastructure provider we’re using. Gone.&lt;/p&gt;

&lt;p&gt;Trying to solve this problem directly and up front is difficult. It’s
too generic and we don’t know the root cause yet. But, we can give
ourselves some time while we assess the situation and start to resume
normal service for our users.&lt;/p&gt;

&lt;h3 id=&#34;creating-a-static-copy-of-gov-uk&#34;&gt;Creating a static copy of GOV.UK&lt;/h3&gt;

&lt;p&gt;Back in 2012, one of the nice properties of GOV.UK was that the
majority of pages were static. Static HTML, CSS, JavaScript and
images. Additionally, there were only 20,000 pages in total.&lt;/p&gt;

&lt;p&gt;One of our solutions at the time was to run a task overnight to visit
every page on GOV.UK that wasn’t a form and save it to disk. This
process would take a couple of hours to complete. We’d then transfer
the files to some backup machines that were ready to be switched over
to should the worst occur.&lt;/p&gt;

&lt;p&gt;We called the code that did this the GOV.UK Mirror.&lt;/p&gt;

&lt;h3 id=&#34;fast-forward-to-present-day&#34;&gt;Fast forward to present day&lt;/h3&gt;

&lt;p&gt;Various agencies and departments have transitioned to GOV.UK and we’re
now up to over 140,000 pages. We found that the GOV.UK Mirror was now
taking close to 50 hours to complete. It meant that a given page could
be up to two days out of date should we need to switch to our
mirror. For pages like foreign travel advice that update more
regularly than once a day this was a problem.&lt;/p&gt;

&lt;h3 id=&#34;what-problems-are-we-trying-to-solve&#34;&gt;What problems are we trying to solve?&lt;/h3&gt;

&lt;p&gt;We knew that the full crawl was taking too long at 50 hours. We would
want this to complete within a day. We also couldn’t crawl certain
pages that get updated often on an ad-hoc basis such as foreign travel
advice. Finally, there was no way of pausing or stopping the mirror
process mid-run. We couldn’t continue easily from the last good state
so we had to restart from the beginning each time.&lt;/p&gt;

&lt;h3 id=&#34;building-it&#34;&gt;Building it&lt;/h3&gt;

&lt;p&gt;We made a conscious decision to split the GOV.UK Mirror into two
components. A producer to give us the initial set of URLs and a
consumer to crawl them, and write the pages to disk. The two
components would communicate using a message queue. This way, we’d
remove our reliance on the nightly task to complete the work and could
use the message queue for crawling ad-hoc pages. Using a message queue
also meant we could continue where we left off.&lt;/p&gt;

&lt;p&gt;The producer is now a simpler process that retrieves a list of URLs
from our &lt;a href=&#34;https://github.com/alphagov/govuk_content_api&#34;&gt;Content API&lt;/a&gt;
and publishes them to an exchange. Most of the work is done in the
consumer component, which is written in Go and the message queue
broker we’re using is RabbitMQ.&lt;/p&gt;

&lt;p&gt;We wanted the ability to horizontally scale out crawling to improve
the rate at which we completed the work we were given. We could
achieve parallelism on the queue by increasing the number of
consumers, but we wouldn’t be able to keep track of URLs that had been
crawled across the nodes. We needed to think beyond a single process
running at one time.&lt;/p&gt;

&lt;p&gt;We used Redis to share state across the workers. We use Redis to keep
track of URLs that had been crawled before and check whether or not to
crawl them as we pick up URLs from the message queue. Now we can have
many message queue consumers to get through work faster based on our
workload. The total time for a full crawl is now 4 hours.&lt;/p&gt;

&lt;h3 id=&#34;what-have-we-learnt&#34;&gt;What have we learnt?&lt;/h3&gt;

&lt;p&gt;We had been running the GOV.UK Mirror for long enough to know which
areas we didn’t like, from operating it through to functionality we
knew to be missing. Not only that, but we also understood the problem
better than we did at GOV.UK’s release. There was no magical epiphany
that occurred; this is the nature of writing software – you have to
adapt and update as you know more.&lt;/p&gt;

&lt;p&gt;After two years of running GOV.UK we’re finding that we have to
revisit many of the choices we had made. The site has grown a lot and
it’s time to take another look at many of the applications we built
back in 2012.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.gov.uk/design-principles#fifth&#34;&gt;Iterate. Then iterate again.&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Just a few more tweaks</title>
      <link>https://www.violentlymild.com/posts/just-a-few-more-tweaks/</link>
      <pubDate>Fri, 12 Feb 2010 00:00:00 +0000</pubDate>
      
      <guid>https://www.violentlymild.com/posts/just-a-few-more-tweaks/</guid>
      <description>

&lt;p&gt;Whether you’re a designer or developer, tweaks can become the bane of
your existence or the fastest way to ship that feature. When you’re
working to a deadline or budget it’s not always possible to be as
thorough as you’d like, so when should you be doing those tweaks?&lt;/p&gt;

&lt;h3 id=&#34;solving-usability-problems&#34;&gt;Solving usability problems&lt;/h3&gt;

&lt;p&gt;In a previous post I explained
&lt;a href=&#34;https://www.violentlymild.com/posts/why-you-should-do-usability-testing/&#34;&gt;why you should do usability testing&lt;/a&gt;. Something
that I neglected to explain is that doing usability testing shouldn’t
trigger mass rewrites of code or entire redesigns of
functionality. Once you’ve got your results and have them prioritised
you should: fix the biggest problems, with the least effort, that can
be solved for most people. After these issues have been fixed, try
testing the system once more and you’ll be able to gain better
feedback on what you might be missing.&lt;/p&gt;

&lt;h3 id=&#34;tweak-or-redesign&#34;&gt;Tweak or Redesign&lt;/h3&gt;

&lt;p&gt;The most obvious benefits of tweaking include: reduced cost, less work
and faster completion time. However, from a project management
perspective, tweaks are much more likely to happen as they don’t
require as much planning, client meetings or questioning to get signed
off compared to big overhauls. In addition to this, most people aren’t
too fond of entire redesigns, so a tweak might mean less of the user’s
time needs to be spent on understanding what’s changed.&lt;/p&gt;

&lt;p&gt;On the other hand, too many tweaks can make for a confusing system. By
adding too many tweaks at the same time you may sacrifice the
navigation or continuity of the system, leading to long-term
issues. Sometimes a well thought out implementation can produce better
results than a bundle of tweaks that are poorly executed.&lt;/p&gt;

&lt;h3 id=&#34;tweak-and-then-refactor&#34;&gt;Tweak and then refactor&lt;/h3&gt;

&lt;p&gt;You’re never going to end up with perfect solution on the first try
(maybe you do, I don’t know), but it’s always best to iterate and then
clean up. Personally, after every five tweaks that I implement I tend
to try and clean them up where possible. My thinking behind this is
that five tweaks aren’t so many to cause issues down the line, but any
more may give you problems when adding functionality at a later date.&lt;/p&gt;

&lt;p&gt;In conclusion, while tweaks tend to be frowned upon they are a
necessary evil. As long as you clean up what you’ve done on a regular
basis, you won’t cause yourself too many major issues.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Can you teach me how to make computer games?</title>
      <link>https://www.violentlymild.com/posts/can-you-teach-me-how-to-make-computer-games/</link>
      <pubDate>Thu, 04 Feb 2010 00:00:00 +0000</pubDate>
      
      <guid>https://www.violentlymild.com/posts/can-you-teach-me-how-to-make-computer-games/</guid>
      <description>

&lt;p&gt;I was asked recently by a friend to teach his son — we’ll call him
Marcus — how to program. Like many children (and many to follow)
Marcus &lt;em&gt;just wanted to make games&lt;/em&gt;. In this instance, I thought of
Python and the &lt;a href=&#34;http://www.pygame.org/&#34;&gt;PyGame&lt;/a&gt; library for it’s
breadth and quality of documentation. Sadly, I still needed to teach
him the basics of programming and Python isn’t as forgiving to
beginners as I’d like.&lt;/p&gt;

&lt;p&gt;My challenge was trying to keep things fun, while still learning how
to program. Over the years I’ve read numerous technical books, but
none compare to the accessibility of
&lt;a href=&#34;http://mislav.uniqpath.com/poignant-guide/&#34;&gt;Why’s (poignant) Guide to Ruby&lt;/a&gt;
when it comes to understanding the mindset of a language. The bonus of
this would be that a lot of the knowledge learnt would be transferable
to Python as well.&lt;/p&gt;

&lt;h3 id=&#34;learning-to-program-was-a-secondary-aim&#34;&gt;Learning to program was a secondary aim&lt;/h3&gt;

&lt;p&gt;When I learn a new programming language I tend to read a book or a set
of tutorials end-to-end, completing every exercise and example until I
understand it. In comparison, the poignant guide reads like a story
rather than sticking to technical examples. You’re taken through
different landscapes with bacon-craving foxes, granny bombers and
floating whales. While you’re laughing at chunky bacon jokes you’ve
already learnt the basics of instance variables, class methods and
method arguments. The beauty of the poignant guide starts to shine
through when you see the beautiful comics. At first they seem messy,
but the style adds to the stories making for a much more compelling
learning experience.&lt;/p&gt;

&lt;p&gt;As a side not, while I find the comics endearing I can understand why
many programmers would be put off. If you’d like to get started with
Ruby quickly and are confident in your core computer science knowledge
this might not be the book for you, but if you’re a beginner or are
about to teach someone the basics this might be a great choice. As an
alternative, you might be better off trying the
&lt;a href=&#34;http://www.pragprog.com/titles/ruby/programming-ruby&#34;&gt;pick-axe book for Ruby&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;hello-world&#34;&gt;Hello World!&lt;/h3&gt;

&lt;p&gt;We both breezed through the poignant guide within a day, allowing
enough time (another day) for me to try and apply some of the
knowledge to Ruby and gaming. We both sat down and started to build a
basic text adventure game and began by typing out some of the common
features of the game. It’s a puzzle game where a &lt;em&gt;player&lt;/em&gt; moves
through different &lt;em&gt;rooms&lt;/em&gt; fighting &lt;em&gt;demons&lt;/em&gt; by &lt;strong&gt;farting on them&lt;/strong&gt;. I
initially spent an hour building out the classes for each of the
objects in the game explaining why this is useful, after which we
switched seats and I helped with any unknowns. Some of the programmers
out there might call this &lt;strong&gt;pair programming&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Marcus was a great student and was able to get the game finished in
less time than I expected. Probably the most enjoyable part of using
the poignant guide to teach programming was that I didn’t have to
state “use an array” and get a confused look back. Instead I would
refer to the different components as they were laid out in the
stories, such as caterpillars (arrays) and loud words (destructive
methods).&lt;/p&gt;

&lt;h3 id=&#34;where-do-we-go-from-here&#34;&gt;Where do we go from here?&lt;/h3&gt;

&lt;p&gt;It looks like I’ll be heading back next weekend to add to the core
Ruby knowledge. My aim is for Marcus to be using Python and PyGame by
March and I’ll start teaching some simple habits to make the switch as
smooth as possible — whitespace is probably going to be the first of
these.&lt;/p&gt;

&lt;p&gt;If you’re ever asked to teach someone how to program I can’t emphasise
enough how useful the poignant guide will prove to be. In addition,
using Ruby meant that the usual traps that most new programmers fall
into — forgetting semi-colons, curly braces and brackets — never see
the light of the day.&lt;/p&gt;

&lt;p&gt;If possible, I’ll try to follow this blog post up and track Marcus’s
progress. Should he also consent I might put some of the source code
up should you wish to get a better idea of how a text adventure game
could be laid out in
Ruby. &lt;a href=&#34;http://mislav.uniqpath.com/poignant-guide/book/chapter-3.html#section2&#34;&gt;Chunky Bacon!&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why you should do usability testing</title>
      <link>https://www.violentlymild.com/posts/why-you-should-do-usability-testing/</link>
      <pubDate>Thu, 28 Jan 2010 00:00:00 +0000</pubDate>
      
      <guid>https://www.violentlymild.com/posts/why-you-should-do-usability-testing/</guid>
      <description>

&lt;p&gt;I recently completed my first usability test and while it wasn’t very
rigorous, it definitely opened up my eyes to how much feedback can be
gained in such a short period of time. This became even more evident
when showing results to the clients (designer team) who were
over-confident in their ability to produce easy to use products.&lt;/p&gt;

&lt;p&gt;I feel the process of usability testing can be summed up in these &lt;del
datetime=&#34;2010-01-28T14:46:56+00:00&#34;&gt;four&lt;/del&gt; five steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Watch someone use your product&lt;/li&gt;
&lt;li&gt;Take note of any issues they have&lt;/li&gt;
&lt;li&gt;Reward/de-brief the participant for their time&lt;/li&gt;
&lt;li&gt;Fix the usability problems encountered&lt;/li&gt;
&lt;li&gt;Go to step 1&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;While usability testing has been defined and re-defined numerous
times, the basic principle is simple: you watch people &lt;em&gt;use&lt;/em&gt; your
product. Coming from a development background I found this hard to
swallow as I was of the opinion that people should use (and test) the
product when it’s finished. I was regularly doing app-based unit
testing to make sure that the core logic was always working as
expected, but I didn’t think that giving an incomplete experience
would at all benefit the final outcome.&lt;/p&gt;

&lt;h3 id=&#34;testing-on-a-budget&#34;&gt;Testing on a budget&lt;/h3&gt;

&lt;p&gt;Having recently read Steve Krug’s
&lt;a href=&#34;http://www.sensible.com/dmmt.html&#34;&gt;Don’t Make Me Think&lt;/a&gt;, I opted for
a DIY approach to testing. The project was around mid-way through
design and implementation and due to the overall complexity involved
in the product I felt that a usability test would be wise before
moving forwards. Being a member of the development team I found it
easy enough to take notes and explain them to the relevant team
members for improvement.&lt;/p&gt;

&lt;p&gt;The test format was fairly simple. Three individuals were gathered who
had no previous history or knowledge of the product. They were each
(separately) sat down in a room with myself infront of a
computer. They would use the product (an application) and would be
asked to complete a series of tasks and give a play-by-play commentary
on what they’re doing and thinking. For the purposes of this test, a
set of ten common tasks were set as the base-line to make testing fair
amongst the different participants. In case you were wondering,
&lt;a href=&#34;http://silverbackapp.com/&#34;&gt;Silverback&lt;/a&gt; was used as the recorder.&lt;/p&gt;

&lt;h3 id=&#34;why-was-it-useful&#34;&gt;Why was it useful?&lt;/h3&gt;

&lt;p&gt;After voicing my concerns about possible difficulties in using the UI,
my opinions were shot down as I &lt;em&gt;wasn’t the target audience&lt;/em&gt;. Having
completed the usability test one thing was made blindingly clear to
the design team: their core concepts weren’t easy to
understand. Despite some features being unexpectedly beneficial to the
test participants the core of the design had basic problems, which
luckily could be dealt with this early on.&lt;/p&gt;

&lt;p&gt;Initial reaction was frustration and anger, given the shear amount of
time that was spent on this app, however within a short while it
became a competition to see who could spot further issues to do with
speed and sight when going back over the test videos.&lt;/p&gt;

&lt;p&gt;I can happily confirm that the team I worked with in creating this
application have been more than happy with my thoughts and findings on
usability testing. So much so in fact, that they’ve made it a weekly
occurrence! Participants are dragged in from all areas and rewarded
with vouchers and free food. The money spent on them clearly outweighs
the lost sales and man hours that would occur when attempting to do
changes last minute or after release.&lt;/p&gt;

&lt;p&gt;If you haven’t done any usability test yet, what are you waiting for?
The cost incurred for the above was around £30 total (Silverback was
used while still on a trial license) and the benefits to the business
were a great deal more than that. Happy testing.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Working to constraints</title>
      <link>https://www.violentlymild.com/posts/working-to-constraints/</link>
      <pubDate>Fri, 22 Jan 2010 00:00:00 +0000</pubDate>
      
      <guid>https://www.violentlymild.com/posts/working-to-constraints/</guid>
      <description>&lt;p&gt;I’ve been reading the 37signals &lt;a href=&#34;http://37signals.com/svn/&#34;&gt;SVN blog&lt;/a&gt;
for a while now, but a
&lt;a href=&#34;http://ecorner.stanford.edu/authorMaterialInfo.html?mid=2334&#34;&gt;recent talk&lt;/a&gt;
by &lt;abbr title=&#34;David Heinemeier Hansson&#34;&gt;DHH&lt;/abbr&gt; really got me
thinking. In it he speaks to a group of Stanford students and explains
why they need to &lt;em&gt;Unlearn their MBA&lt;/em&gt;. In this post I take some of the
topics that he discusses and throw in my own opinion.&lt;/p&gt;

&lt;p&gt;As a side note: It’s interesting to consider how many people’s
professional lives have been shaped by the software framework that DHH
released to the world. While many argue that 37signals needs to be
more open about their business figures and research methods, it’s
impossible to negate how they’ve created jobs (growing the industry?)
without ever dilluting their revenue.&lt;/p&gt;

&lt;p&gt;I recently graduated (June 2009) from University and luckily it hasn’t
been very difficult to find work – either full-time or freelance. The
tech industry seems to be one of the few that saw a boost during the
recession. Whilst many were being laid off from work, those same
companies sought expertise in building systems to automate and
streamline as many tasks as possible. As a result, there are much more
tech jobs than a few years ago and many of my friends who work in
recruitment can attest to this. Gone (hopefully) are the days where
candidates have to outright lie on their job applications and instead
are chosen on their ability to create. Whether it be open-source
projects, personal websites or even public repositories, there are a
number of ways that a new computer science graduate can show their
worth.&lt;/p&gt;

&lt;p&gt;DHH takes this one step further and claims that it’s an opportune time
for any new start-up (business) to gain traction. The reason given is
that when the economy is steady, consumers are more likely to go with
the tried and tested (read: expensive) option, but when they’re in a
recession there’s a greater chance of trying out new products and
services. With this in mind, should any graduate have difficulty
finding a job, perhaps it’s time to start on that business idea
they’ve had for some time? Rather than plan out how they’re going to
run this new business, they should just &lt;strong&gt;do it&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Planning out the next five years of a small business is clearly just
harmful guessing. A significant change will happen when the business
starts to &lt;strong&gt;get things done&lt;/strong&gt;, not by planning for them. Spending time
procrastinating and pretending to work is never going to help anyone
and is going to be especially detrimental to any employees of the
small business. Small business owners need to stop relying on fancy
projections to save them from their bank managers. Instead an emphasis
on completing tasks and helping employees needs to be made. &lt;/rant&gt;&lt;/p&gt;

&lt;p&gt;It’s very rare that a company is an overnight success and in a few
cases, the business may have just been working it’s way up to release
for some time. However, unlimited time and money never lead to great
products. By limiting the amount of time you have to go live, it’s
likely that you can strip out any extra noise from the product/service
and produce early iterations that will be indicative to it’s core
features and/or functionality. In short: great, simple products!&lt;/p&gt;

&lt;p&gt;Personally, I’ve found limiting the amount of time I spend learning
new languages has forced me to concentrate more in that short period
of time and has accelerated my learning to no end. In addition to
this, I recommend anyone learning a new programming language to
combine their progress with the problems at
&lt;a href=&#34;http://projecteuler.net/&#34;&gt;Project Euler&lt;/a&gt;. I’ve found it interesting
learning how different languages treat the same set of problems and am
indebted to that community for their comprehensive break-downs of
elegant solutions.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Removable storage is just for the spec sheets</title>
      <link>https://www.violentlymild.com/posts/removable-storage-is-just-for-the-spec-sheets/</link>
      <pubDate>Tue, 12 Jan 2010 00:00:00 +0000</pubDate>
      
      <guid>https://www.violentlymild.com/posts/removable-storage-is-just-for-the-spec-sheets/</guid>
      <description>&lt;p&gt;Google released their &lt;em&gt;official phone&lt;/em&gt; early last week: the
&lt;a href=&#34;http://www.google.com/phone&#34;&gt;Nexus One&lt;/a&gt;. Putting aside the fact that
they’ve completely
&lt;a href=&#34;http://www.theregister.co.uk/2010/01/08/google_nexus_partner_friendly/&#34;&gt;shafted&lt;/a&gt;
all of their technology partners, I’d like to discuss how spec sheets
are ruining the user experience of mobile devices. Many users (myself
included) may plead the case for expandable storarge, but there is
strong resistance when users are forced to manage their own files. Bad
UI of file browsers and locks preventing data from being moved make
using removable storage on phones a drain.&lt;/p&gt;

&lt;p&gt;A prime example of this is my current phone —
&lt;a href=&#34;http://www.nokia.co.uk/find-products/all-phones/nokia-n73&#34;&gt;Nokia N73&lt;/a&gt;
— which comes with 32MB of built-in storage but is expandable using
the provided miniSD slot. I thought this would be brilliant! I could
store applications, images, messages and contacts all on the miniSD
card and never have to worry about transferring any of this data,
phone to phone, ever again. As always, there’s a catch. I’m limited to
storing just media files on the miniSD card and all other data is
stored on the phone’s paltry memory. The reasoning provided is for
security, but surely I — as the user — should be able to choose where
my own personal files are stored?&lt;/p&gt;

&lt;p&gt;In much a similar way, Google is failing to understand the same issues
that are plaguing my three year old phone. While the Nexus One has an
expandable Micro SD card, the on-board memory is just 512MB. This
wouldn’t be too bad until you take into account that the Nexus One is
a smart phone targeted towards users who will take advantage of its
many applications. Sadly, a limit has been placed on how much storage
can be used for applications to 190mb:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Nexus can accommodate memory cards up to 32 gigabytes (a 4
gigabyte card comes with it) — and yet, inexplicably, the Nexus
allots only the tiniest sliver of that (190 megabytes) for
downloaded
apps. &lt;a href=&#34;http://www.nytimes.com/2010/01/06/technology/personaltech/06pogue.html?hp&#34;&gt;Source&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Why are Google so insistent on messing up the storage situation on
Android phones? The N1 had 512mB memory built-in, which Android will
only use for storing the OS, applications and any relevant application
data. Similarly, the earlier G1 went through the same issues having
just 256MB built-in memory, which wasn’t even enough to install any
official OS updates! Instead of learning their lesson, Google has just
taken it up one notch. Rather than learn from these mistakes and
become a real competitor to Apple, they’ve failed miserably.&lt;/p&gt;

&lt;p&gt;Considering the cost of physical memory these days, it doesn’t make
sense when companies aren’t willing to increase built-in storage
sizes. These days 4GB storage should be seen as a minimum, while
allowing room for premium &lt;abbr title=&#34;Stock-Keeping Unit&#34;&gt;SKUs&lt;/abbr&gt;
with 32GB+ to pile on markup without anyone complaining. Apple’s
abhorrence towards removable storage isn’t just because Jobs’ saying
is final, or compromise on form factor, but simply because it’s a
usability nightmare.&lt;/p&gt;

&lt;p&gt;Modded firmware has been released for most phones, allowing users to
bend the will of their mobile device’s storage. However, allowing all
photos, music and applications on the removable media will mean that
it has to be unmounted on the device, removing the use of any
applications in the process. I understand that an easy way around this
may be to expose a samba share, e.g. Archos, rather than give direct
access to the storage media, but what’s to prevent a user from just
ejecting the media and doing so anyway?&lt;/p&gt;

&lt;p&gt;As a result of this fatal flaw, I have no plans on buying the new
Nexus One in the immediate future. If I were to purchase a new phone
based purely on usability of storage, it would probably be an
iPhone. Alternatively, I could just stick with my current N73 and save
myself a lot of &lt;em&gt;wasted&lt;/em&gt; money on applications.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Designing an interface to create interfaces</title>
      <link>https://www.violentlymild.com/posts/designing-an-interface-to-create-interfaces/</link>
      <pubDate>Sat, 02 Jan 2010 00:00:00 +0000</pubDate>
      
      <guid>https://www.violentlymild.com/posts/designing-an-interface-to-create-interfaces/</guid>
      <description>

&lt;p&gt;&lt;em&gt;I’ve been reading&lt;/em&gt; &lt;a href=&#34;http://www.codersatwork.com/&#34;&gt;&lt;em&gt;Coders at Work&lt;/em&gt;&lt;/a&gt;
&lt;em&gt;recently and this blog post is spawned from a point made by&lt;/em&gt;
&lt;a href=&#34;http://research.microsoft.com/en-us/people/simonpj/&#34;&gt;&lt;em&gt;Simon Peyton Jones&lt;/em&gt;&lt;/a&gt;
&lt;em&gt;in the book — Page 252, Paragraph 3 — about creating usable
programming languages.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When the field of &lt;abbr title=&#34;Human Computer Interaction&#34;&gt;HCI&lt;/abbr&gt;
was established in the early 1980s, learnability was the research
focus. By the late 1980s we had a handle on how to design for the
novice user, demonstrating that even the best commercially available
personal computer was much harder to learn than claimed by it’s
manufacturer.&lt;/p&gt;

&lt;p&gt;We created computers because our ability to think using rigorous logic
is limited in terms of speed, capacity and accuracy. Given these
limitations, shouldn’t any interfaces we create play to our strengths
without demanding too much from our weaknesses?&lt;/p&gt;

&lt;p&gt;Programming languages go through rapid development to fit formal
(hardware) specifications and have meant that usability best practices
have fallen by the way-side. However, usability is holistic and
something that has to be intentionally designed in from the beginning
rather than slapped on at the end.&lt;/p&gt;

&lt;p&gt;Usability studies in this area are lacking, but there are
&lt;a href=&#34;http://www.ppig.org/papers/13th-clarke.pdf&#34; title=&#34;Evaluating a new
programming language, by Steven Clarke&#34;&gt;some&lt;/a&gt; that have managed to have an
effect on the final product. More recently though, full on
&lt;a href=&#34;http://www.cs.cmu.edu/~NatProg/&#34;&gt;task forces&lt;/a&gt; have been springing up
and providing good information on &lt;strong&gt;designing the interface that
creates the interface&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&#34;testing-products-with-a-steep-learning-curve&#34;&gt;Testing products with a steep learning curve&lt;/h3&gt;

&lt;p&gt;As stated by Jakob Nielson in his
&lt;a href=&#34;http://www.useit.com/papers/iterative_design/&#34;&gt;Iterative User Interface Design&lt;/a&gt;
paper:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For some user interfaces, full expertise may take several years to
acquire, and even for simpler interfaces, one would normally need to
train users for several weeks or months before their performance
plateaued out at the expert level&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Sadly, by the time you’ve learnt how to use the product effectively,
you’re too biased to comment on it’s usability fairly. This is just
one of the fundamental limits on usability testing of complicated
products. Despite this, there is still knowledge to be gained from
testing programming languages at a novice or intermediate level.&lt;/p&gt;

&lt;p&gt;A simple programming test could be held, with people who have the same
amount of training — university students? — in different languages and
then measure factors ranging from the number of errors along the way,
to overall performance. A simple task may involve scraping data from a
set of web pages such as &lt;a href=&#34;http://www.last.fm/&#34;&gt;last.fm&lt;/a&gt; and organising
them into a searchable data structure. The user could attempt to use
any programming language but a time-limit would need to be set to keep
the test fair.&lt;/p&gt;

&lt;h3 id=&#34;libraries-vs-languages&#34;&gt;Libraries vs. Languages&lt;/h3&gt;

&lt;p&gt;Being a programmer, I tend to look for solutions by dissecting the
problem into smaller chunks and in many cases that makes me lean
towards libraries. It’s likely that any seasoned developer would do
the same, opting for the &lt;em&gt;best tools&lt;/em&gt; for the job rather than any one
single language. Does this fulfil the &lt;em&gt;efficient use&lt;/em&gt; category of
usability? No.&lt;/p&gt;

&lt;p&gt;Most of these libraries are built by software developers to facilitate
their work, increasing the need for usability in this particular
area. &lt;strong&gt;If something is too time-consuming, a developer will automate
it. &lt;span style=&#34;font-weight: normal;&#34;&gt;However it does then raise the
question of whether the flaws lie in the language, where the expert
knowledge is needed to understand how to automate a given task in the
first place.&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;can-we-have-a-yardstick&#34;&gt;Can we have a yardstick?&lt;/h3&gt;

&lt;p&gt;There is ample evidence to support the notion that experts behave
differently from novices, but that should never mean we pick one of
these two groups and design specifically for them. Program designers
should understand the context of use, set appropriate goals, and
measure that we are achieving those goals. The myriad of different
programming paradigms mean that we can’t effectively compare the
usability of different languages, but that shouldn’t hinder the
process of increasing usability for the lowest common denominator.&lt;/p&gt;

&lt;p&gt;The lack of cross-over between Funtional, Procedural or even
Event-based programming languages makes formalising a test harness
extremely difficult. Attempting to test all of the different kinds of
programming languages may produce a clear winner in terms of
usability, but are likely to fail large proportions of the development
community.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Disclaimer: I would never pretend to be an expert in this area, so
I’m sure there is a lot of good material that I’m not aware of
yet. Please let me know if you have any further useful information.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Talks</title>
      <link>https://www.violentlymild.com/talks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.violentlymild.com/talks/</guid>
      <description>

&lt;p&gt;This is a list of the talks that I’ve given or am going to give.&lt;/p&gt;

&lt;h3 id=&#34;2013&#34;&gt;2013&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.devopsdays.org/events/2013-paris/&#34;&gt;DevOpsDays Paris – How we release software for GOV.UK&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;2015&#34;&gt;2015&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.meetup.com/Go-London-User-Group/events/221550269/&#34;&gt;London Go User Group – Getting Go into your organisation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.meetup.com/London-DevOps/events/221534372/&#34;&gt;London DevOps – An alternative history of DevOps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.codemesh.io/codemesh2015/kushal-pisavadia&#34;&gt;CodeMesh 2015 – An introduction to Schedulers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>