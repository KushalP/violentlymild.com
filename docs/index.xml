<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Violently Mild</title>
    <link>https://www.violentlymild.com/</link>
    <description>Recent content on Violently Mild</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Fri, 05 Apr 2019 18:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://www.violentlymild.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Deployment Contracts</title>
      <link>https://www.violentlymild.com/posts/deployment-contracts/</link>
      <pubDate>Tue, 10 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://www.violentlymild.com/posts/deployment-contracts/</guid>
      <description>I’ve been in a number of discussions recently around how to improve deployment workflows and how best to implement (and improve upon) 12-Factor applications in a continuous delivery environment. The following is a bunch of assumptions, desires, and implementations I have. It’s entirely aimed at what some organisations are calling their “platform team” and might not be applicable to all use-cases.
Helping everyone do more For the majority of modern day platform teams their task is to understand the needs of the teams they support and to provide simpler processes for them to do what they need to do.</description>
    </item>
    
    <item>
      <title>On Performance Reviews</title>
      <link>https://www.violentlymild.com/posts/on-performance-reviews/</link>
      <pubDate>Fri, 03 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://www.violentlymild.com/posts/on-performance-reviews/</guid>
      <description>This blog post is for my current and future colleagues, but I&amp;rsquo;ll get to that later. It&amp;rsquo;s currently performance review season where I work and many other medium-to-large organisations. I&amp;rsquo;ve heard a mixture of fear, uncertainty and doubt recently when it comes to performance reviews so I thought I&amp;rsquo;d write down some thoughts on how I feel about them.
If you&amp;rsquo;re not familiar with the term, performance reviews are commonly an annual process.</description>
    </item>
    
    <item>
      <title>What will happen in the next year?</title>
      <link>https://www.violentlymild.com/posts/what-will-happen-in-the-next-year/</link>
      <pubDate>Mon, 30 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://www.violentlymild.com/posts/what-will-happen-in-the-next-year/</guid>
      <description>I recently attended Scale Summit. It’s an unconference that’s been running on and off for a few years. Every year there’s a regular session of “What’s changed since the last Scale Summit?”. At this session we go through any notes we have from previous years and discuss what’s changed. Finally, the session ends with those in attendance suggesting what they believe will happen in the coming year.
Sessions at Scale Summit last forty-five minutes.</description>
    </item>
    
    <item>
      <title>Solving problems with dependency management in Go</title>
      <link>https://www.violentlymild.com/posts/solving-problems-with-dependency-management-in-go/</link>
      <pubDate>Tue, 24 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://www.violentlymild.com/posts/solving-problems-with-dependency-management-in-go/</guid>
      <description>This is a blog post I wrote for the GDS Technology blog. You can read the original here.
In a previous blog post we talked about how we use the programming language Go. But it only briefly touched on the issue of dependency management, where Go is reliant on backwards compatible or vendored software. This post is about what we’ve done about that.
Libraries As developers we regularly use other libraries or packages to help us solve a problem rather than writing everything ourselves.</description>
    </item>
    
    <item>
      <title>Running a game day for GOV.UK</title>
      <link>https://www.violentlymild.com/posts/running-a-game-day-for-gov-uk/</link>
      <pubDate>Fri, 06 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://www.violentlymild.com/posts/running-a-game-day-for-gov-uk/</guid>
      <description>This is a blog post I wrote for the GDS Technology blog. You can read the original here.
For much of January, GOV.UK had a firebreak. It’s where teams are given some time to investigate new ideas and clean up technical debt. As part of this we ran a game day. In this blog post I’m going to explain what game days are, what we did and what we learnt.</description>
    </item>
    
    <item>
      <title>Using Go in government</title>
      <link>https://www.violentlymild.com/posts/using-go-in-government/</link>
      <pubDate>Fri, 14 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>https://www.violentlymild.com/posts/using-go-in-government/</guid>
      <description>This is cross posted from the 5th birthday celebration series on the GopherAcademy blog and the GDS Technology blog. It was co-authored with Dan Carley.
When the UK Government Digital Service started working on GOV.UK, much of it was built in Ruby. Since then, we’ve used a number of different programming languages across government including Java, Clojure, Scala, Python and Javascript. More recently, we’ve turned to Go for some projects.</description>
    </item>
    
    <item>
      <title>Taking another look at GOV.UK’s disaster recovery</title>
      <link>https://www.violentlymild.com/posts/taking-another-look-at-gov-uks-disaster-recovery/</link>
      <pubDate>Wed, 27 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://www.violentlymild.com/posts/taking-another-look-at-gov-uks-disaster-recovery/</guid>
      <description>This is a blog post I wrote for the GDS Technology blog. You can read the original here.
As GOV.UK gets bigger, we often need to revisit the ways that we originally solved some problems. One thing that’s changed recently is how we prepare for disaster recovery.
Disaster Recovery The reality of working in technology is that software systems fail, more often than we’d like and usually in ways that are beyond our control.</description>
    </item>
    
    <item>
      <title>Just a few more tweaks</title>
      <link>https://www.violentlymild.com/posts/just-a-few-more-tweaks/</link>
      <pubDate>Fri, 12 Feb 2010 00:00:00 +0000</pubDate>
      
      <guid>https://www.violentlymild.com/posts/just-a-few-more-tweaks/</guid>
      <description>Whether you’re a designer or developer, tweaks can become the bane of your existence or the fastest way to ship that feature. When you’re working to a deadline or budget it’s not always possible to be as thorough as you’d like, so when should you be doing those tweaks?
Solving usability problems In a previous post I explained why you should do usability testing. Something that I neglected to explain is that doing usability testing shouldn’t trigger mass rewrites of code or entire redesigns of functionality.</description>
    </item>
    
    <item>
      <title>Can you teach me how to make computer games?</title>
      <link>https://www.violentlymild.com/posts/can-you-teach-me-how-to-make-computer-games/</link>
      <pubDate>Thu, 04 Feb 2010 00:00:00 +0000</pubDate>
      
      <guid>https://www.violentlymild.com/posts/can-you-teach-me-how-to-make-computer-games/</guid>
      <description>I was asked recently by a friend to teach his son — we’ll call him Marcus — how to program. Like many children (and many to follow) Marcus just wanted to make games. In this instance, I thought of Python and the PyGame library for it’s breadth and quality of documentation. Sadly, I still needed to teach him the basics of programming and Python isn’t as forgiving to beginners as I’d like.</description>
    </item>
    
    <item>
      <title>Why you should do usability testing</title>
      <link>https://www.violentlymild.com/posts/why-you-should-do-usability-testing/</link>
      <pubDate>Thu, 28 Jan 2010 00:00:00 +0000</pubDate>
      
      <guid>https://www.violentlymild.com/posts/why-you-should-do-usability-testing/</guid>
      <description>I recently completed my first usability test and while it wasn’t very rigorous, it definitely opened up my eyes to how much feedback can be gained in such a short period of time. This became even more evident when showing results to the clients (designer team) who were over-confident in their ability to produce easy to use products.
I feel the process of usability testing can be summed up in these four five steps:</description>
    </item>
    
    <item>
      <title>Working to constraints</title>
      <link>https://www.violentlymild.com/posts/working-to-constraints/</link>
      <pubDate>Fri, 22 Jan 2010 00:00:00 +0000</pubDate>
      
      <guid>https://www.violentlymild.com/posts/working-to-constraints/</guid>
      <description>I’ve been reading the 37signals SVN blog for a while now, but a recent talk by DHH really got me thinking. In it he speaks to a group of Stanford students and explains why they need to Unlearn their MBA. In this post I take some of the topics that he discusses and throw in my own opinion.
As a side note: It’s interesting to consider how many people’s professional lives have been shaped by the software framework that DHH released to the world.</description>
    </item>
    
    <item>
      <title>Removable storage is just for the spec sheets</title>
      <link>https://www.violentlymild.com/posts/removable-storage-is-just-for-the-spec-sheets/</link>
      <pubDate>Tue, 12 Jan 2010 00:00:00 +0000</pubDate>
      
      <guid>https://www.violentlymild.com/posts/removable-storage-is-just-for-the-spec-sheets/</guid>
      <description>Google released their official phone early last week: the Nexus One. Putting aside the fact that they’ve completely shafted all of their technology partners, I’d like to discuss how spec sheets are ruining the user experience of mobile devices. Many users (myself included) may plead the case for expandable storarge, but there is strong resistance when users are forced to manage their own files. Bad UI of file browsers and locks preventing data from being moved make using removable storage on phones a drain.</description>
    </item>
    
    <item>
      <title>Designing an interface to create interfaces</title>
      <link>https://www.violentlymild.com/posts/designing-an-interface-to-create-interfaces/</link>
      <pubDate>Sat, 02 Jan 2010 00:00:00 +0000</pubDate>
      
      <guid>https://www.violentlymild.com/posts/designing-an-interface-to-create-interfaces/</guid>
      <description>I’ve been reading Coders at Work recently and this blog post is spawned from a point made by Simon Peyton Jones in the book — Page 252, Paragraph 3 — about creating usable programming languages.
When the field of HCI was established in the early 1980s, learnability was the research focus. By the late 1980s we had a handle on how to design for the novice user, demonstrating that even the best commercially available personal computer was much harder to learn than claimed by it’s manufacturer.</description>
    </item>
    
    <item>
      <title>Talks</title>
      <link>https://www.violentlymild.com/talks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.violentlymild.com/talks/</guid>
      <description> This is a list of the talks that I’ve given or am going to give.
2013  DevOpsDays Paris – How we release software for GOV.UK  2015  London Go User Group – Getting Go into your organisation London DevOps – An alternative history of DevOps CodeMesh 2015 – An introduction to Schedulers  </description>
    </item>
    
  </channel>
</rss>